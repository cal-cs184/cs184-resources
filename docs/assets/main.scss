---
# Only the main Sass file needs front matter (the dashes are enough)
---

@import "main";

$resource-types: slides, document, demo;

.search {
    position: sticky;
    top: 0;
    max-height: 100vh;
    background-color: white;
    z-index: 10;
    margin: 0 -2em;
    padding: 1em 2em;
    border-bottom: 1px solid $color-border;
    box-shadow: 0 18px 20px -20px rgba(0, 0, 0, 0.16);
}

#search-inputbox {
    position: relative;
}

#search-input {
    -webkit-appearance: none;
    box-sizing: border-box;
    font-size: 1em;
    font-family: inherit;
    display: block;
    width: 100%;
    height: 3em;
    border: 1px solid $color-border;
    margin: 0;
    padding: 1em 1.5em 1em 3em;
    position: relative;
    z-index: 2;
    background-color: white;
    outline: none;
    border-radius: 1.5em;
    background-image: url("{{ site.baseurl }}/assets/search.svg");
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    background-position: 1em 50%;

    transition: box-shadow ease 0.15s;
    box-shadow: 0 10px 10px -10px rgba(0, 0, 0, 0.0);
    #search-inputbox.active & {
        box-shadow: 0 10px 10px -10px rgba(0, 0, 0, 0.08);
    }
}

#search-input-topics {
    position: absolute;
    z-index: 1;
    top: 0;
    right: 0;
    left: 0;
    max-height: 30vh;
    display: block;
    overflow-x: visible;
    overflow-y: auto;
    margin: 0;
    padding: 4.5em 1.5em 1em;
    transition: height ease 0.3s;
    border: 1px solid $color-border;
    border-radius: 1.5em;
    background-color: white;
    box-shadow: 0 5px 30px rgba(0, 0, 0, 0.08);

    transition: opacity ease 0.15s;
    #search-inputbox:not(.active) & {
        opacity: 0;
        pointer-events: none;
    }

    > .topic {
        margin: 0 0 0.5em 0;
        cursor: default;
    
        &:not(.matched) {
            display: none;
        }

        @each $topic, $val in $topics {
            &[data-topic^="#{$topic}"].selected,
            &[data-topic^="#{$topic}"].focused {
                border-color: change-color(map-get($val, color), $lightness: 60%);
                background-color: change-color(map-get($val, color), $lightness: 95%);
            }
        }
    }

    &.none-matched {
        &::after {
            display: block;
            content: "No Matches";
            color: $color-text-secondary;
            margin-bottom: 0.5em;
        }
    }
}

#search-topics {
    margin-top: 1em;

    &.none-selected {
        display: none;
    }

    > .topic {
        cursor: default;

        &:not(.selected) {
            display: none;
        }

        @each $topic, $val in $topics {
            &[data-topic^="#{$topic}"] {
                border-color: change-color(map-get($val, color), $lightness: 60%);
                background-color: change-color(map-get($val, color), $lightness: 95%);
            }
        }
    }
}

.resources {
    margin: 3em 0;
}

.resource {
    display: flex;
    border-top: 1px solid $color-border;
    border-bottom: 1px solid $color-border;
    padding: 1.5em 0;
    text-decoration: none;
    position: relative;

    + .resource {
        margin-top: -1px;
    }

    &:hover {
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.08);
        z-index: 1;
        margin-right: -1em;
        margin-left: -1em;
        padding-right: #{1 * $font-size - 1px};
        padding-left: #{1 * $font-size - 1px};
        background-color: white;
        border: 1px solid $color-border;
        border-radius: 6px;
    }

    &:not(.matched) {
        display: none;
    }

    h3 {
        margin: 0 0 0.5rem 0;
    }

    p {
        margin: 0.5rem 0;
    }

    .type-icon {
        flex: none;
        width: 1.5em;
        height: 1.5em;
        margin: 0 0.5em 0 1em;
        background-size: contain;
        background-position: center;
        background-repeat: no-repeat;
    }

    @each $type in $resource-types {
        &[data-type="#{$type}"] .type-icon {
            background-image: url("{{ site.baseurl }}/assets/type-#{$type}.svg");
        }   
    }

    @each $topic, $val in $topics {
        .topics > .topic[data-topic^="#{$topic}"].matched {
            border-color: change-color(map-get($val, color), $lightness: 60%);
            background-color: change-color(map-get($val, color), $lightness: 95%);
        }
    }
    
    .topics > .topic:not(.matched) {
        opacity: 0.3;
    }
}
